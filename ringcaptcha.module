<?php

/**
 * Define constants for RingCaptcha
 */
define('RINGCAPTCHA_LIBRARY', 'ringcaptcha');
define('RINGCAPTCHA_API_VERSION', '1.0');
define('RINGCAPTCHA_USER_PENDING', 1);
define('RINGCAPTCHA_USER_CONFIRMED', 2);

/**
 * Implements hook_menu().
 */
function ringcaptcha_menu() {
  
  $items['admin/config/system/ringcaptcha'] = array(
    'title' => 'RingCaptcha',
    'description' => 'Administer your RingCaptcha settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ringcaptcha_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'ringcaptcha.admin.inc',
  );
  $items['admin/config/system/ringcaptcha/settings'] = array(
    'title' => 'RingCaptcha Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  return $items;
  
}

/**
 * Implements hook_permission().
 */
function ringcaptcha_permission() {
  return array(
    'edit own mobile phone number' => array(
      'title' => t('Edit own Mobile phone number'),
      'description' => t('Here you can edit and re-validate your mobile phone number'),
    ),
  );
}

/**
 * Access callback for RingCaptcha account editing.
 */
function ringcaptcha_edit_access($account) {
  return user_edit_access($account) && user_access('edit own mobile phone number');
}


/**
 * Implements hook_libraries_info().
 */
function ringcaptcha_libraries_info() {
  $libraries['ringcaptcha'] = array(
    'name' => 'RingCaptcha library',
    'vendor url' => 'http://ringcaptcha.com',
    'download url' => 'https://bitbucket.org/ringcaptcha/ringcaptcha-php/downloads',
    'path' => 'lib',
    'version' => '1.0',
    'files' => array(
      'php' => array(
        'Ringcaptcha.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_FORMID_form_alter().
 */
function ringcaptcha_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  
  if (variable_get('ringcaptcha_registration_form', 1)) {
    
      $markup_widget = '<script type="text/javascript" charset="UTF-8" src="http://api.ringcaptcha.com/widget/' . variable_get('ringcaptcha_appkey') . '"></script>';
      $form['#attributes']['class'][] = 'ringcaptcha-form';
      $form['#attached']['css'] = array(drupal_get_path('module', 'ringcaptcha') . '/ringcaptcha.css');
      
     // Add RingCaptcha widget to user register form for validation.
      $form['ringcaptcha'] = array(
        '#markup' => $markup_widget,
        '#prefix' => '<div class="ringcaptcha form-wrapper">',
        '#suffix' => '</div>',  
      );      
      
      // Add validation TODO
      $form['#validate'][] = 'ringcaptcha_register_validate';
      $form['#submit'][] = 'ringcaptcha_register_submit';
  } 
  
  dpm($form);
  
}

/**
 * Custom validation function for phone numbers during registration.
 */
function ringcaptcha_register_validate(&$form, &$form_state) {
  
    if (($library = libraries_load(RINGCAPTCHA_LIBRARY)) && !empty($library['loaded'])) {
      $appKey = variable_get('ringcaptcha_appkey'); 
      $secretKey = variable_get('ringcaptcha_secretkey');
      
      $ringcaptcha = new Ringcaptcha($appKey, $secretKey);
      
      if (variable_get('ringcaptcha_require_ssl') === 1) {
         $require_ssl = TRUE; 
      } 
      else {
         $require_ssl = FALSE; 
      }
      
      $ringcaptcha->setSecure($require_ssl);

      $ringcaptchaPinCode = $_POST["ringcaptcha_pin_code"];
      $ringcaptchaToken   = $_POST["ringcaptcha_session_id"];
      
       if ($ringcaptcha->isValid($ringcaptchaPinCode,  $ringcaptchaToken)) {
         // Successful verification flow.
         $user_phone = $ringcaptcha->getPhoneNumber();  //retrieve phone number
         $geo_located = $ringcaptcha->isGeoLocated(); //retrieve whether its been geo located or not
         $id = $ringcaptcha->getId(); //retrieve and store transaction id for reconciliation purposes
         drupal_set_message("Success", 'status');
      } 
      else {
        drupal_set_message("RingCaptcha verification failed. Reason: " . $ringcaptcha->getMessage(), 'error');
        $form['actions']['submit']['#disabled'] = FALSE;  
      }
    }
}

/**
 * Custom submit handler for RingCaptcha during registration.
 */
function ringcaptcha_register_submit($form, &$form_state) {
  // TODO
}


/**
 * Implements hook_menu_alter().
 */
function ringcaptcha_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/ringcaptcha']['page callback'] = 'ringcaptcha_user_settings';
  $callbacks['user/%user_category/edit/ringcaptcha']['module'] = 'ringcaptcha';
  $callbacks['user/%user_category/edit/ringcaptcha']['page arguments'] = array(1);
  $callbacks['user/%user_category/edit/ringcaptcha']['file'] = 'ringcaptcha.pages.inc';
  $callbacks['user/%user_category/edit/ringcaptcha']['access callback'] = array('ringcaptcha_edit_access');
}

/**
 * Implements hook_user_categories().
 */
function ringcaptcha_user_categories() {
  return array(
    array(
      'name' => 'ringcaptcha',
      'title' => t('Mobile Phone'),
      'weight' => 3,
    ),
  );
}


/**
 * Checks if a given Mobile phone number already exists in the database.
 *
 * @param string $number
 *   The mobile number.
 *
 * @result boolean
 *   TRUE if it exists, FALSE otherwise
 */
function ringcaptcha_verify_duplicate_number($number) {
  $result = db_select('ringcaptcha_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->execute()
    ->fetchAssoc();
  if ($result['number'] == $number) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implements hook_user_insert().
 */
function ringcaptcha_user_insert(&$edit, $account, $category) {
  ringcaptcha_user_save($edit, $account, $category);
}

/**
 * Implements hook_user_update().
 */
function ringcaptcha_user_update(&$edit, $account, $category) {
  ringcaptcha_user_save($edit, $account, $category);
}

/**
 * Implements hook_user_delete().
 */
function ringcaptcha_user_delete($account) {
  db_delete('ringcaptcha_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Saves mobile number data to the ringcaptcha_user table in the database.
 */
function ringcaptcha_user_save(&$edit, $account, $category) {
  if (($category == 'ringcaptcha') && isset($edit['ringcaptcha'])) {
    $number = (object) $edit['ringcaptcha'];
    $number->uid = $account->uid;

    $primary_keys = array();
    if (isset($account->ringcaptcha_user['status'])) {
      if ($account->ringcaptcha_user['status'] == RINGCAPTCHA_USER_PENDING && $edit['ringcaptcha']['status'] == RINGCAPTCHA_USER_CONFIRMED) {
        $primary_keys = array('uid');
      }
    }
    drupal_write_record('ringcaptcha_user', $number, $primary_keys);

    $edit['ringcaptcha']['number'] = NULL;
    $edit['ringcaptcha']['status'] = NULL;
  }
}


/**
 * Implements hook_user_login().
 */
function ringcaptcha_user_login(&$edit, $account) {
  // If the users mobile number is in the verification state let them know they
  // need to do verification using RingCaptcha in the settings page. 
  if (user_access('edit own mobile phone number') && !empty($account->ringcaptcha_user) && $account->ringcaptcha_user['status'] == 1) {
    $account_link = l(t("account settings page"), 'user/' . $account->uid . '/edit/ringcaptcha');
    drupal_set_message(t("You must confirm your Mobile phone number using RingCaptcha. Go to the !link to verify your Mobile phone.", array('!link' => $account_link)), 'warning');
  }
}


/**
 * Determines if a number is associated with a user account
 *
 * @param $number
 *   The phone number we are searching for
 * @param $return_user
 *   Boolean flag to return a user object if TRUE
 *   
 * @results bool
 *   TRUE or FALSE based on query, User object if $number belongs to user and $return_user is TRUE and 
 */
function ringcaptcha_verify_number($number, $return_user = FALSE) {
  $result = db_select('ringcaptcha_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->condition('t.status', RINGCAPTCHA_USER_CONFIRMED)
    ->execute()
    ->fetchAssoc();
  if (!empty($result['uid'])) {
    if ($return_user) {
      return user_load($result['uid']);
    }
    return TRUE;
  }
  return FALSE;
}


